import type { IIsocodeCountry } from './countries.interface';


const isocodeCountriesAlpha2: Record<string, string> = {
    af: 'Afghanistan',
    al: 'Albania',
    dz: 'Algeria',
    as: 'American Samoa',
    ad: 'Andorra',
    ao: 'Angola',
    ai: 'Anguilla',
    aq: 'Antarctica',
    ag: 'Antigua and Barbuda',
    ar: 'Argentina',
    am: 'Armenia',
    aw: 'Aruba',
    au: 'Australia',
    at: 'Austria',
    az: 'Azerbaijan',
    bs: 'Bahamas',
    bh: 'Bahrain',
    bd: 'Bangladesh',
    bb: 'Barbados',
    by: 'Belarus',
    be: 'Belgium',
    bz: 'Belize',
    bj: 'Benin',
    bm: 'Bermuda',
    bt: 'Bhutan',
    bo: 'Bolivia',
    bq: 'Bonaire, Sint Eustatius and Saba',
    ba: 'Bosnia and Herzegovina',
    bw: 'Botswana',
    bv: 'Bouvet Island',
    br: 'Brazil',
    io: 'British Indian Ocean Territor',
    bn: 'Brunei',
    bg: 'Bulgaria',
    bf: 'Burkina Faso',
    bi: 'Burundi',
    cv: 'Cabo Verde',
    kh: 'Cambodia',
    cm: 'Cameroon',
    ca: 'Canada',
    ky: 'Cayman Islands',
    cf: 'Central African Republi',
    td: 'Chad',
    cl: 'Chile',
    cn: 'China',
    cx: 'Christmas Island',
    cc: 'Cocos Islands',
    co: 'Colombia',
    km: 'Comoros',
    cd: 'Congo, Democratic Republic',
    cg: 'Congo',
    ck: 'Cook Islands',
    cr: 'Costa Rica',
    hr: 'Croatia',
    cu: 'Cuba',
    cw: 'Curaçao',
    cy: 'Cyprus',
    cz: 'Czechia',
    ci: 'Côte d\'Ivoire',
    dk: 'Denmark',
    dj: 'Djibouti',
    dm: 'Dominica',
    do: 'Dominican Republic',
    ec: 'Ecuador',
    eg: 'Egypt',
    sv: 'El Salvador',
    gq: 'Equatorial Guinea',
    er: 'Eritrea',
    ee: 'Estonia',
    sz: 'Eswatini',
    et: 'Ethiopia',
    fk: 'Falkland Islands',
    fo: 'Faroe Islands',
    fj: 'Fiji',
    fi: 'Finland',
    fr: 'France',
    gf: 'French Guiana',
    pf: 'French Polynesia',
    tf: 'French Southern Territories',
    ga: 'Gabon',
    gm: 'Gambia',
    ge: 'Georgia',
    de: 'Germany',
    gh: 'Ghana',
    gi: 'Gibraltar',
    gr: 'Greece',
    gl: 'Greenland',
    gd: 'Grenada',
    gp: 'Guadeloupe',
    gu: 'Guam',
    gt: 'Guatemala',
    gg: 'Guernsey',
    gn: 'Guinea',
    gw: 'Guinea-Bissau',
    gy: 'Guyana',
    ht: 'Haiti',
    hm: 'Heard Island and McDonald Islands',
    va: 'Holy See',
    hn: 'Honduras',
    hk: 'Hong Kong',
    hu: 'Hungary',
    is: 'Iceland',
    in: 'India',
    id: 'Indonesia',
    ir: 'Iran',
    iq: 'Iraq',
    ie: 'Ireland',
    im: 'Isle of Man',
    il: 'Israel',
    it: 'Italy',
    jm: 'Jamaica',
    jp: 'Japan',
    je: 'Jersey',
    jo: 'Jordan',
    kz: 'Kazakhstan',
    ke: 'Kenya',
    ki: 'Kiribati',
    kp: 'Korea, North',
    kr: 'Korea, South',
    kw: 'Kuwait',
    kg: 'Kyrgyzstan',
    la: 'Laos',
    lv: 'Latvia',
    lb: 'Lebanon',
    ls: 'Lesotho',
    lr: 'Liberia',
    ly: 'Libya',
    li: 'Liechtenstein',
    lt: 'Lithuania',
    lu: 'Luxembourg',
    mo: 'Macao',
    mg: 'Madagascar',
    mw: 'Malawi',
    my: 'Malaysia',
    mv: 'Maldives',
    ml: 'Mali',
    mt: 'Malta',
    mh: 'Marshall Islands',
    mq: 'Martinique',
    mr: 'Mauritania',
    mu: 'Mauritius',
    yt: 'Mayotte',
    mx: 'Mexico',
    fm: 'Micronesia',
    md: 'Moldova',
    mc: 'Monaco',
    mn: 'Mongolia',
    me: 'Montenegro',
    ms: 'Montserrat',
    ma: 'Morocco',
    mz: 'Mozambique',
    mm: 'Myanmar',
    na: 'Namibia',
    nr: 'Nauru',
    np: 'Nepal',
    nl: 'Netherlands',
    nc: 'New Caledonia',
    nz: 'New Zealand',
    ni: 'Nicaragua',
    ne: 'Niger',
    ng: 'Nigeria',
    nu: 'Niue',
    nf: 'Norfolk Island',
    mp: 'Northern Mariana Islands',
    no: 'Norway',
    om: 'Oman',
    pk: 'Pakistan',
    pw: 'Palau',
    ps: 'Palestine',
    pa: 'Panama',
    pg: 'Papua New Guinea',
    py: 'Paraguay',
    pe: 'Peru',
    ph: 'Philippines',
    pn: 'Pitcairn',
    pl: 'Poland',
    pt: 'Portugal',
    pr: 'Puerto Rico',
    qa: 'Qatar',
    mk: 'Republic of North Macedonia',
    ro: 'Romania',
    ru: 'Russian Federation',
    rw: 'Rwanda',
    re: 'Réunion',
    bl: 'Saint Barthélemy',
    sh: 'Saint Helena, Ascension and Tristan da Cunha',
    kn: 'Saint Kitts and Nevis',
    lc: 'Saint Lucia',
    mf: 'Saint Martin',
    pm: 'Saint Pierre and Miquelon',
    vc: 'Saint Vincent and the Grenadines',
    ws: 'Samoa',
    sm: 'San Marino',
    st: 'Sao Tome and Principe',
    sa: 'Saudi Arabia',
    sn: 'Senegal',
    rs: 'Serbia',
    sc: 'Seychelles',
    sl: 'Sierra Leone',
    sg: 'Singapore',
    sx: 'Sint Maarten',
    sk: 'Slovakia',
    si: 'Slovenia',
    sb: 'Solomon Islands',
    so: 'Somalia',
    za: 'South Africa',
    gs: 'South Georgia and the South Sandwich Islands',
    ss: 'South Sudan',
    es: 'Spain',
    lk: 'Sri Lanka',
    sd: 'Sudan',
    sr: 'Suriname',
    sj: 'Svalbard and Jan Mayen',
    se: 'Sweden',
    ch: 'Switzerland',
    sy: 'Syrian',
    tw: 'Taiwan',
    tj: 'Tajikistan',
    tz: 'Tanzania',
    th: 'Thailand',
    tl: 'Timor-Leste',
    tg: 'Togo',
    tk: 'Tokelau',
    to: 'Tonga',
    tt: 'Trinidad and Tobago',
    tn: 'Tunisia',
    tr: 'Turkey',
    tm: 'Turkmenistan',
    tc: 'Turks and Caicos Islands',
    tv: 'Tuvalu',
    ug: 'Uganda',
    ua: 'Ukraine',
    ae: 'United Arab Emirates',
    gb: 'United Kingdom',
    uk: 'United Kingdom',
    um: 'Minor Outlying Islands',
    us: 'United States of America',
    uy: 'Uruguay',
    uz: 'Uzbekistan',
    vu: 'Vanuatu',
    ve: 'Venezuela',
    vn: 'Viet Nam',
    vg: 'Virgin Islands, GB',
    vi: 'Virgin Islands, US',
    wf: 'Wallis and Futuna',
    eh: 'Western Sahara',
    ye: 'Yemen',
    zm: 'Zambia',
    zw: 'Zimbabwe',
    ax: 'Aland Islands',
    xk: 'Kosovo',
    eu: 'Europe',
};
const isocodeCountriesAlpha2Reverse: Record<string, string> =
    Object.fromEntries(Object.entries(isocodeCountriesAlpha2)
        .map(([
            k, v,
        ]) => [
            v.toLowerCase(), k,
        ]));
const isocodeCountriesAlpha3To2: Record<string, string> = {
    afg: 'af',
    ala: 'ax',
    alb: 'al',
    dza: 'dz',
    asm: 'as',
    and: 'ad',
    ago: 'ao',
    aia: 'ai',
    ata: 'aq',
    atg: 'ag',
    arg: 'ar',
    arm: 'am',
    abw: 'aw',
    aus: 'au',
    aut: 'at',
    aze: 'az',
    bhs: 'bs',
    bhr: 'bh',
    bgd: 'bd',
    brb: 'bb',
    blr: 'by',
    bel: 'be',
    blz: 'bz',
    ben: 'bj',
    bmu: 'bm',
    btn: 'bt',
    bol: 'bo',
    bes: 'bq',
    bih: 'ba',
    bwa: 'bw',
    bvt: 'bv',
    bra: 'br',
    vgb: 'vg',
    iot: 'io',
    brn: 'bn',
    bgr: 'bg',
    bfa: 'bf',
    bdi: 'bi',
    khm: 'kh',
    cmr: 'cm',
    can: 'ca',
    cpv: 'cv',
    cym: 'ky',
    caf: 'cf',
    tcd: 'td',
    chl: 'cl',
    chn: 'cn',
    hkg: 'hk',
    mac: 'mo',
    cxr: 'cx',
    cck: 'cc',
    col: 'co',
    com: 'km',
    cog: 'cg',
    cod: 'cd',
    cok: 'ck',
    cri: 'cr',
    civ: 'ci',
    hrv: 'hr',
    cub: 'cu',
    cuw: 'cw',
    cyp: 'cy',
    cze: 'cz',
    dnk: 'dk',
    dji: 'dj',
    dma: 'dm',
    dom: 'do',
    ecu: 'ec',
    egy: 'eg',
    slv: 'sv',
    gnq: 'gq',
    eri: 'er',
    est: 'ee',
    eth: 'et',
    flk: 'fk',
    fro: 'fo',
    fji: 'fj',
    fin: 'fi',
    fra: 'fr',
    guf: 'gf',
    pyf: 'pf',
    atf: 'tf',
    gab: 'ga',
    gmb: 'gm',
    geo: 'ge',
    deu: 'de',
    gha: 'gh',
    gib: 'gi',
    grc: 'gr',
    grl: 'gl',
    grd: 'gd',
    glp: 'gp',
    gum: 'gu',
    gtm: 'gt',
    ggy: 'gg',
    gin: 'gn',
    gnb: 'gw',
    guy: 'gy',
    hti: 'ht',
    hmd: 'hm',
    vat: 'va',
    hnd: 'hn',
    hun: 'hu',
    isl: 'is',
    ind: 'in',
    idn: 'id',
    irn: 'ir',
    irq: 'iq',
    irl: 'ie',
    imn: 'im',
    isr: 'il',
    ita: 'it',
    jam: 'jm',
    jpn: 'jp',
    jey: 'je',
    jor: 'jo',
    kaz: 'kz',
    ken: 'ke',
    kir: 'ki',
    prk: 'kp',
    kor: 'kr',
    kwt: 'kw',
    kgz: 'kg',
    lao: 'la',
    lva: 'lv',
    lbn: 'lb',
    lso: 'ls',
    lbr: 'lr',
    lby: 'ly',
    lie: 'li',
    ltu: 'lt',
    lux: 'lu',
    mkd: 'mk',
    mdg: 'mg',
    mwi: 'mw',
    mys: 'my',
    mdv: 'mv',
    mli: 'ml',
    mlt: 'mt',
    mhl: 'mh',
    mtq: 'mq',
    mrt: 'mr',
    mus: 'mu',
    myt: 'yt',
    mex: 'mx',
    fsm: 'fm',
    mda: 'md',
    mco: 'mc',
    mng: 'mn',
    mne: 'me',
    msr: 'ms',
    mar: 'ma',
    moz: 'mz',
    mmr: 'mm',
    nam: 'na',
    nru: 'nr',
    npl: 'np',
    nld: 'nl',
    ant: 'an',
    ncl: 'nc',
    nzl: 'nz',
    nic: 'ni',
    ner: 'ne',
    nga: 'ng',
    niu: 'nu',
    nfk: 'nf',
    mnp: 'mp',
    nor: 'no',
    omn: 'om',
    pak: 'pk',
    plw: 'pw',
    pse: 'ps',
    pan: 'pa',
    png: 'pg',
    pry: 'py',
    per: 'pe',
    phl: 'ph',
    pcn: 'pn',
    pol: 'pl',
    prt: 'pt',
    pri: 'pr',
    qat: 'qa',
    reu: 're',
    rou: 'ro',
    rus: 'ru',
    rwa: 'rw',
    blm: 'bl',
    shn: 'sh',
    kna: 'kn',
    lca: 'lc',
    maf: 'mf',
    spm: 'pm',
    vct: 'vc',
    wsm: 'ws',
    smr: 'sm',
    stp: 'st',
    sau: 'sa',
    sen: 'sn',
    srb: 'rs',
    syc: 'sc',
    sle: 'sl',
    sgp: 'sg',
    sxm: 'sx',
    svk: 'sk',
    svn: 'si',
    slb: 'sb',
    som: 'so',
    zaf: 'za',
    sgs: 'gs',
    ssd: 'ss',
    esp: 'es',
    lka: 'lk',
    sdn: 'sd',
    sur: 'sr',
    sjm: 'sj',
    swz: 'sz',
    swe: 'se',
    che: 'ch',
    syr: 'sy',
    twn: 'tw',
    tjk: 'tj',
    tza: 'tz',
    tha: 'th',
    tls: 'tl',
    tgo: 'tg',
    tkl: 'tk',
    ton: 'to',
    tto: 'tt',
    tun: 'tn',
    tur: 'tr',
    tkm: 'tm',
    tca: 'tc',
    tuv: 'tv',
    uga: 'ug',
    ukr: 'ua',
    are: 'ae',
    gbr: 'gb',
    usa: 'us',
    umi: 'um',
    ury: 'uy',
    uzb: 'uz',
    vut: 'vu',
    ven: 've',
    vnm: 'vn',
    vir: 'vi',
    wlf: 'wf',
    esh: 'eh',
    yem: 'ye',
    zmb: 'zm',
    zwe: 'zw',
    xkx: 'xk',
};

export function getCountryName(code: string): string | undefined {
    return isocodeCountriesAlpha2[ code.toLowerCase() ];
}


export function getCountryCode(name: string): string | undefined {
    return isocodeCountriesAlpha2Reverse[ name.toLowerCase() ];
}


export function convertCodesToCountries(codes: string[]): IIsocodeCountry[] {
    const countries: IIsocodeCountry[] = [];

    for (const code of codes) {
        const codeUC = code.toLowerCase();

        countries.push({
            code: codeUC,
            name: isocodeCountriesAlpha2[ codeUC ] ?? 'Unknown',
        });
    }

    return countries.sort((
        a, b
    ) => a.name.localeCompare(b.name));
}


export function convertIso3ToIso2(code: string): string | undefined {
    return isocodeCountriesAlpha3To2[ code.toLowerCase() ];
}
