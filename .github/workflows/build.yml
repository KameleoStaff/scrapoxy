name: Build Docker and NPM

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build scrapoxy
        run: npx nx build backend-app --skip-nx-cache --configuration production

      - name: Publish NPM
        working-directory: dist/scrapoxy
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: fabienvauchelles/scrapoxy
          tags: |
            type=pep440,pattern={{major}}.{{minor}}
            type=pep440,pattern={{major}}.{{minor}}.{{patch}}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/backend/app/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Install dependencies for announcements
        run: npm install handlebars

      - name: Generate and publish changelog
        uses: actions/github-script@v7
        env:
          RELEASE_DISCORD_WEBHOOK: ${{ secrets.RELEASE_DISCORD_WEBHOOK }}
        with:
          script: |
            const
              handlebars = require('handlebars'),
              {promises: fs} = require('fs');

            const template = handlebars.compile(`
            Scrapoxy's version **{{ version }}** is out.

            {{#if description}}
            {{ description }}

            {{/if}}
            {{#if breaking}}
            BREAKING CHANGES: {{ breaking }}

            {{/if}}
            Here is the [changelog](<https://scrapoxy.io/intro/changelog#_{{ versionLink }}>):

            {{#each commitGroups}}
            __{{this.title}}__

              {{#each this.commits}}
            - {{ this }}
              {{/each}}

            {{/each}}
            `.trim());

            const dataRaw = await fs.readFile('./packages/website/intro/changelog.json');
            const dataJson = JSON.parse(dataRaw.toString());

            const version = process.env.GITHUB_REF.replace('refs/tags/', '');
            const release = dataJson.releases.find(release => release.version === version);
            if (!release) {
              throw new Error(`Version ${version} not found in changelog`);
            }

            const content = template({
              ...release,
              versionLink: version.replace(/\./g, '-'),
            });

            const webhook = process.env.RELEASE_DISCORD_WEBHOOK;
            if (!webhook) {
              throw new Error('Missing Discord webhook');
            }

            const response = await fetch(webhook, {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
              },
              body: JSON.stringify({content}),
            });

            if (!response.ok) {
              throw new Error(`Failed to send message to Discord: ${response.statusText}`);
            }
